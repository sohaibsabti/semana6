package semana6;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Random;

public class OrderedList<T extends Comparable<T>> implements Iterable<T> {
    private Node first;
    private Node last;
    private int size;

    private class Node {
        public T item;
        public Node next;
    }

    public OrderedList() {
        first = null;
        last = null;
        size = 0;
    }

    public void add(T item) {
        Node newNode = new Node();
        newNode.item = item;
        newNode.next = null;

        if (isEmpty()) {
            first = newNode;
            last = newNode;
        } else {
            last.next = newNode;
            last = newNode;
        }
        size++;
    }

    public boolean contains(T item) {
        Node current = first;
        while (current != null) {
            if (current.item.equals(item)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public Iterator<T> iterator() {
        return new ListIterator();
    }

    private class ListIterator implements Iterator<T> {
        private Node current = first;

        public boolean hasNext() {
            return current != null;
        }

        public T next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            T item = current.item;
            current = current.next;
            return item;
        }
    }

    public void sort() {
        // Implementacao do algoritmo de Insertion Sort
        Node current = first;
        while (current != null) {
            Node nextNode = current.next;
            insert(current);
            current = nextNode;
        }
    }

    private void insert(Node current) {
        if (current == null || current.next == null) {
            return;
        }
        Node temp = current.next;
        while (temp != null && temp.item.compareTo(current.item) < 0) {
            T tempItem = current.item;
            current.item = temp.item;
            temp.item = tempItem;
            temp = temp.next;
        }
    }

    public void shuffle() {
        // Implementacao do algoritmo Knuth Shuffle
        Random rand = new Random();
        for (int i = size - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);
            swap(i, j);
        }
    }

    private void swap(int i, int j) {
        if (i == j) {
            return;
        }
        Node nodeI = getNode(i);
        Node nodeJ = getNode(j);
        T temp = nodeI.item;
        nodeI.item = nodeJ.item;
        nodeJ.item = temp;
    }

    private Node getNode(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        Node current = first;
        for (int i = 0; i < index; i++) {
            current = current.next;
        }
        return current;
    }

    public boolean isSorted() {
        Node current = first;
        while (current != null && current.next != null) {
            if (current.item.compareTo(current.next.item) > 0) {
                return false;
            }
            current = current.next;
        }
        return true;
    }

    // Metodo para realizar observacoes experimentais do tempo de execucao
    // Utilizando a Doubling Hypothesis
    public void observeRuntime() {
        // Implemente aqui suas observacoes experimentais
    }
}
